from aiogram import Router
from aiogram.filters import ADMINISTRATOR, PROMOTED_TRANSITION, ChatMemberUpdatedFilter
from aiogram.types import ChatMemberAdministrator, ChatMemberUpdated
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession

from bot.core.loader import bot
from bot.utils.messages import make_linked
from bot.utils.user import get_username
from common.database.models import ChannelModel
from common.database.services.user import add_user_channel, remove_user_channel


__all__ = ()


router = Router(name="admin_channels")


def _get_linked_channel(event: ChatMemberUpdated) -> str:
    chat_title = event.chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    chat_username = get_username(event)
    return make_linked(chat_title, chat_username)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=PROMOTED_TRANSITION))
async def on_bot_promoted(event: ChatMemberUpdated, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∫–æ–≥–¥–∞ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞"""
    logger.debug(f"Bot was promoted to administrator by user_id={event.from_user.id} in channel_id={event.chat.id}")

    linked_channel = _get_linked_channel(event)

    await bot.send_message(
        event.from_user.id,
        f"‚úÖ  –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ {linked_channel}",
        parse_mode="HTML",
    )

    await on_bot_permissions_changed(event, session)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=~PROMOTED_TRANSITION))
async def on_bot_demoted(event: ChatMemberUpdated, session: AsyncSession) -> None:
    logger.debug(f"Bot was removed from administrators by user_id={event.from_user.id} in channel_id={event.chat.id}")

    linked_channel = _get_linked_channel(event)

    # TelegramAPI –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ —Ä–∞–Ω—å—à–µ, —á–µ–º —Ç–æ—Ç —É—Å–ø–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.send_message(
            event.from_user.id,
            f"‚ÑπÔ∏è  –Ø –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –∫–∞–Ω–∞–ª–µ {linked_channel}\n\n"
            f"‚ö†Ô∏è  <b>–¢–µ–ø–µ—Ä—å —è –Ω–µ —Å–º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ</b>",
            parse_mode="HTML",
        )
    finally:
        await remove_user_channel(session, event.from_user.id, event.chat.id)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=ADMINISTRATOR))
async def on_bot_permissions_changed(event: ChatMemberUpdated, session: AsyncSession) -> None:
    logger.debug(f"Bot permissions were updated by user_id={event.from_user.id} in channel_id={event.chat.id}")

    linked_channel = _get_linked_channel(event)

    if not isinstance(event.new_chat_member, ChatMemberAdministrator):
        logger.warning(f"Expected ChatMemberAdministrator, got {type(event.new_chat_member)}")
        return

    permissions_list = (
        (event.new_chat_member.can_post_messages, "–ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"),
        (event.new_chat_member.can_delete_messages, "–ú–æ–≥—É —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"),
    )

    message_permissions = ""
    all_granted = True

    for has_permission, description in permissions_list:
        emoji = "‚úÖ" if has_permission else "‚ùå"
        message_permissions += f"    {emoji} {description}\n"
        if not has_permission:
            all_granted = False

    if not all_granted:
        await bot.send_message(
            event.from_user.id,
            f"‚ÑπÔ∏è  –ú–æ–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª–µ {linked_channel} –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.\n\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:\n"
            f"{message_permissions}\n"
            f"‚ö†Ô∏è  <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞</b>",
            parse_mode="HTML",
        )
        await remove_user_channel(session, event.from_user.id, event.chat.id)
        return

    await bot.send_message(
        event.from_user.id,
        f"‚ÑπÔ∏è  –ú–æ–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª–µ {linked_channel} –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.\n\n"
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:\n"
        f"{message_permissions}\n"
        "üéâ  <b>–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã!</b>",
        parse_mode="HTML",
    )

    channel = ChannelModel(
        user_id=event.from_user.id,
        chat_id=event.chat.id,
        title=event.chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        username=event.chat.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
    )

    await add_user_channel(session, channel.user_id, channel)

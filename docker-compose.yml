services:
  bot:
    image: ${ENV_DOCKER_USERNAME}/${ENV_PROJECT_NAME}-bot:latest
    container_name: ${ENV_PROJECT_NAME}-bot
    env_file:
      - .env
    volumes:
      - app-logs:/app/logs
    networks:
      - app-network
    depends_on:
      - pgbouncer
      - redis
      - api
    labels:
      telegram-notifier.monitor: true

  api:
    image: ${ENV_DOCKER_USERNAME}/${ENV_PROJECT_NAME}-api:latest
    container_name: ${ENV_PROJECT_NAME}-api
    ports:
      - "${API_PORT}:${API_PORT}"
    env_file:
      - .env
    volumes:
      - app-logs:/app/logs
    networks:
      - app-network
    depends_on:
      - pgbouncer
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_PORT}/api/v1/health" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 3s
    labels:
      telegram-notifier.monitor: true

  postgres:
    image: postgres:17.4-alpine
    container_name: ${ENV_PROJECT_NAME}-postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 3s
    labels:
      telegram-notifier.monitor: true

  pgbouncer:
    image: bitnami/pgbouncer:1.24.0
    container_name: ${ENV_PROJECT_NAME}-pgbouncer
    ports:
      - "${PGBOUNCER_PORT}:${PGBOUNCER_PORT}"
    environment:
      - POSTGRESQL_HOST=postgres
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - postgres
    labels:
      telegram-notifier.monitor: true

  redis:
    image: redis:8.0.0-alpine
    container_name: ${ENV_PROJECT_NAME}-redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: [ "redis-server", "--port", "${REDIS_PORT}" ]
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "${REDIS_PORT}", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 3s

  notifier:
    image: lorcas/docker-telegram-notifier
    container_name: ${ENV_PROJECT_NAME}-notifier
    restart: unless-stopped
    env_file:
      - .env
    environment:
      ONLY_WHITELIST: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro


networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  app-logs:

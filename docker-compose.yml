services:
  bot:
    container_name: ${ENV_PROJECT_NAME}-bot
    image: ${ENV_DOCKER_USERNAME}/${ENV_PROJECT_NAME}-bot:latest
    env_file:
      - .env
    depends_on:
      - pgbouncer
    networks:
      - app-network
    volumes:
      - app-logs:/app/logs
    labels:
      telegram-notifier.monitor: true

  api:
    container_name: ${ENV_PROJECT_NAME}-api
    image: ${ENV_DOCKER_USERNAME}/${ENV_PROJECT_NAME}-api:latest
    env_file:
      - .env
    depends_on:
      - pgbouncer
    networks:
      - app-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_PORT}/api/v1/health/" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 3s
    labels:
      telegram-notifier.monitor: true

  postgres:
    container_name: ${ENV_PROJECT_NAME}-postgres
    image: postgres:17.4-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 3s
    labels:
      telegram-notifier.monitor: true

  pgbouncer:
    container_name: ${ENV_PROJECT_NAME}-pgbouncer
    image: bitnami/pgbouncer:1.24.0
    ports:
      - "${PGBOUNCER_PORT}:6432"
    environment:
      - POSTGRESQL_HOST=postgres
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - app-network
    labels:
      telegram-notifier.monitor: true

  notifier:
    container_name: ${ENV_PROJECT_NAME}-bot
    image: lorcas/docker-telegram-notifier
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file:
      - .env
    environment:
      ONLY_WHITELIST: true


networks:
  app-network:
    driver: bridge


volumes:
  postgres-data:
  app-logs:
